#!/bin/bash
# a tool for finding the next free base10 integer value for an attribute
# This program was primarily created to interact with uidNumber and gidNumber

case $1 in
    --help|-\? )
        usage
        ;;
esac

usage() {
    echo "${0/*\/} --range <start>..<end>[..<step>] [-A <attr>] [ldapsearch(1) options]"
}

function processArgs {
    while (( $# )) ; do
        case $1 in
            --range|-r )
                if [ $# -lt 2 ]; then
                    usage >&2
                    exit 1
                fi
                oldIFS=$IFS
                IFS=".."
                read -r attrvaluereturn spacer attrvaluelimit spacer increment <<< $2
                unset spacer
                IFS=$oldIFS
                isInt $attrvaluereturn assert
                isInt $attrvaluelimit assert
                if [ $attrvaluereturn -eq $attrvaluelimit ]; then
                    if [ -z $increment ] ; then
                        increment=0
                    else
                        isInt $increment assert
                        if [ $increment -ne 0 ]; then
                            echo "<step> should not be $increment for range $attrvaluereturn..$attrvaluelimit" >&2
                            exit 1
                        fi
                    fi
                fi
                if [ $attrvaluereturn -lt $attrvaluelimit ]; then
                    if [ -z $increment ] ; then
                        increment=1
                    else
                        isInt $increment assert
                        if [ $increment -eq 0 ]; then
                            echo "<step> should not be $increment for range $attrvaluereturn..$attrvaluelimit" >&2
                            exit 1
                        elif [ $increment -lt 0 ]; then
                            increment=${increment#-}
                        fi
                    fi
                fi
                if [ $attrvaluelimit -lt $attrvaluereturn ]; then
                    if [ -z $increment ] ; then
                        increment=-1
                    else
                        isInt $increment assert
                        if [ $increment -eq 0 ]; then
                            echo "<step> should not be $increment for range $attrvaluereturn..$attrvaluelimit" >&2
                            exit 1
                        elif [ $increment -gt 0 ]; then
                            increment=-$increment
                        fi
                    fi
                fi
                shift;shift;;
            -A )
                if [ $# -lt 2 ]; then
                    usage >&2
                    exit 1
                fi
                attrs+=($2)
                shift;shift;;
            * )
                ldapsearchargs+=($1)
                shift;;
            esac
     done
}

function isInt {
    case ${1#[-+]} in
        assert )
            usage >&2
            exit 1
            ;;
        *[!0-9]* |  '')
            if [ ! -z $2 ] && [ $2 == "assert" ] ; then
                echo $1 is not an int. >&2
                exit 1
            fi
            return 1
            ;;
        * )
            return 0
            ;;
    esac  
}

processArgs $@

#echo return $attrvaluereturn
#echo limit $attrvaluelimit
#echo increment $increment 

[ -z $ldapfilter ] && ldapfilter="(|"
#sedfilter="/^\$/d;/dn:/d;"
for attr in ${attrs[*]}; do
    if [ $increment -gt 0 ] ; then
        ldapfilter+="(&($attr>=$attrvaluereturn)($attr<=$attrvaluelimit))"
    else
        ldapfilter+="(&($attr<=$attrvaluereturn)($attr>=$attrvaluelimit))"
    fi
    #sedfilter+="s/^$attr: //;"
done
ldapfilter+=")"
sedfilter="/^\$/d;/dn:/d;s/.+:[^ ]* //"

if [ ${#attrs[*]} -eq 1 ]; then
    ldapsortattr=${attrs[*]}
fi

attrvalues=$( ldapsearch -o ldif-wrap=no -LLL ${ldapsortattr+-S $ldapsortattr} ${ldapfilter/(\|)/} ${ldapsearchargs[*]} ${attrs[*]} | sed -r "$sedfilter" )

if [ $increment -eq 0 ]; then
    if [ -z "$attrvalues" ]; then
        echo $attrvaluereturn
        exit
    else
        exit 3
    fi
elif [ $increment -gt 0 ]; then
    attrvalues=$( echo "$attrvalues" | sort -ug )
    for attrvalue in $attrvalues ; do
            isInt $attrvalue assert
            if [ $attrvalue -lt $attrvaluereturn ]; then
                continue
            elif [ $attrvalue -eq $attrvaluereturn ]; then
                attrvaluereturn=$(( $attrvaluereturn + $increment ))
            elif [ $attrvalue -gt $attrvaluelimit ] ; then
                exit 3
            elif [ $attrvalue -gt $attrvaluereturn ] ; then
                break
            fi
    done
else
    attrvalues=$( echo "$attrvalues" | sort -ugr )
    for attrvalue in $attrvalues ; do
            isInt $attrvalue assert
            if [ $attrvalue -gt $attrvaluereturn ] ; then
                continue
            elif [ $attrvalue -eq $attrvaluereturn ]; then
                attrvaluereturn=$(( $attrvaluereturn + $increment ))
            elif [ $attrvalue -lt $attrvaluelimit ] ; then
                exit 3
            elif [ $attrvalue -lt $attrvaluereturn ]; then
                break
            fi
    done
fi
echo $attrvaluereturn
